소프트웨어 테스트 이론

(01) 소프트웨어 테스팅 개요
소프트웨어 테스트 프로세스
소프트웨어 테스트 종류
테스트 설계 기법

소프트웨어 테스팅 개요
 - 요구 사항을 충족하고 사용 목적에 적합한지 소프트웨어 응용 프로그램이나 시스템을 평가하기 위한 과정
 - 실행하고 실제 결과와 예상 결과를 비교하여 결함이나 오류가 있는 지 확인하는 것을 포함한다

소프트웨어 테스팅의 필요성
 - 기대한 대로 동작하지 않는 경우 다양한 문제가 발생
 - 금전적 손실, 시간 낭비, 비즈니스 이미지 손상 등

소프트웨어 에러, 결함, 장애
 - 에러 (Error) : 인간의 실수
 - 결함 (Defects, Fault) : 시스템의 문제, 우리가 찾아야 할 내용
 - 장애 (Failure) : 문제로 인해 생겨난 결과

소프트웨어 테스팅의 목적
 - 결함의 검출과 제품 품질 개선
 - 품질 평가와 의사 결정 지원 : 크리티컬한 문제가 생겼을 경우 출시 멈춤
 - 개발 프로세스 개선 지원

관점에 따른 테스팅의 목적
 - 개발과정 : 소프트웨어 결함을 찾아내고, 수정하기 위해 가능한 많은 장애 발생
 - 인수과정 : 예상대로 시스템이 동작하는지 확인, 요구사항에 맞는지 확인
 - 품질평가 : 특정시간 안에 출시하는 제품의 리스크를 개발 프로젝트에게 전달
 - 유지보수 : 변경 작업이 일어나는 경우, 새로 유입되는 결함이 있는지 확인
 - 운영과정 : 신뢰성 또는 가용성과 같은 시스템의 특성을 평가, 유지보수하거나 운영할때

개발 단계에서의 테스트 레벨 분류
단위 테스트를 주로 진행하지는 않음, 통합 테스트를 주로 진행

개발순서
요구분석->아키텍처 설계->모듈설계->구현

개발 단계에 따른 테스트
 - 단위 테스트 : Unit Test
 - 통합 테스트 : Integration Test
 - 시스템 테스트 : System Test
   - 부기능
 - 인수 테스트 : Acceptance Tes

화면본수
 - 화면 하나당 tc가 몇개 나온다는 평균 개수(보통 15개 정도)

기능 : 움직임(ex.통화 기능)
비기능 : 성능(ex.통화 진행중 일어나는 통화 품질)

소프트웨어 테스팅의 일반적인 원리 : 목적을 생각해야함
원리1. 테스팅은 결함이 존재함을 밝히는 활동이다.
 - 결함이 없다는 것은 증명할 수 없다.
원리2. 완벽한 테스팅은 불가능하다.
 - 무한 경로, 무한 입력 값, 무한 타이핑
 - 리스트 분석과 결정된 우선 순위에 대한 테스팅을 집중
원리3. 테스팅을 개발 초기에 시작한다.
 - 개발 시작과 동시에 테스트를 계획, 전락적으로 접근
 - 테스트 케이스를 도출하면서 문서상의 결함(단어가 틀리거나 번호가 틀리거나 화면이 틀릴경우) 발견, 화면기획서 참고
원리4. 결함 집중
 - 적은 수의 모듈에서 대다수의 결함 발견(결함과 장애가 집중)
원리5. 살충제 패러독스
 - 동일한 테스트를 반복적으로 수행하면 버그를 찾기 힘듦
 - 경험 기반 기법을 통해 테스트 방법을 다양화
원리6. 테스팅은 정황에 의존적이다
 - 효율적,효과적 테스트 팀 조직, 독립적 테스트 환경
원리7. 오류-부재의 궤변
 - 사용자의 요구사항에 맞지 않는다면 결함을 찾고 수정하는 것은 무의미
 - 결함을 모두 발견했다고 해도 품질이 높다고 할 수 없음


(02) 소프트웨어 테스트 프로세스(단계별 필요한 내용 중요)
논리적으로 순차적이지만, 프로세스 내의 활동들은 중복되거나 동시에 발생할 수 있다.
 - 계획
 - 분석
 - 설계 : tc작성
 - 구현
 - 제어
 - 마감

테스트 계획
 - 테스팅의 미션과 목표를 정의하고 이를 만족 시키기 위한 테스트 활동들을 수립하는 과정
 - 모니터링 및 통제 활동의 피드백에 따라 조치를 할 수 있도록 수립되어야 할 것
테스트 계획중 해야할 일
 - 테스트를 위한 자원 파악(인적 자원, 테스트 환경, PC사양 등)
 - 테스트 정책 및 테스트 전략 수립
 - 테스트 분석 및 설계 업무 일정 관리
 - 테스트의 적용, 실행, 평가에 대한 일정 관리(WBS)
 - 종결 기준 결정(메이저 기능 몇개정도 있어도 종결할지 결정)

테스트 제어
 - 실제 진행 상황과 계획을 비교하고 보고하는 활동
 - 프로젝트의 미션과 목표를 위해 조치가 이루어 질 수 있음
테스트 제어중 해야할 일
 - 결과 측정 및 분석
 - 모니터링 및 문서화의 진행, 테스트 범위, 종결 기준
 - 결과 반영 (수정, 변경 등) 활동
 - 의사결정

테스트 분석과 설계
 - 테스트의 기반이 되는 자료 리뷰 (요구사항, 디자인 등)
 - 테스트 대상 아이템 또는 명세, 구조 분석을 통해 테스트 상황을 식별하고 우선 순위 선정
 - 테스트 케이스 설계와 우선 순위 선정
 - 비공식적인 기법으로 테스트 케이스 추가 도출 및 보완(ex.복합결제)

분석
무엇을 테스트 할 것인가?
- 테스트 조건
어떤 것을 먼저 테스트 할 것인가?
- 우선 순위화

설계
어떻게 테스트 할 것인가?
- Testcase 작성
• 선행 조건(ex.필요 계정)
• 테스트 환경 요구사항
• 입력 및 필요 데이터
• 예상결과

구현
테스트 케이스 구현
• 테스트 스크립트 작성
• 테스트 데이터 준비
• 예상결과 정의
• 문서화

테스트 구현과 실행
 - 테스트 케이스의 개발과 중요도 결정, 테스트 데이터 생성, 테스트 절차 수립
 - 테스트 절차의 개발과 우선순위 선정
 - 테스트 실행결과를 기록하고 수행 대상 및 소프트웨어 버전을 기록
 - 기대결과와 실제 결과를 비교
 - 불일치 하는 결과가 나오는 원인을 기록
 - 각각의 불일치에 대한 반복적인 활동(결함 빈도 관련 객관적인 데이터 필요)

테스트 완료 조건의 평가와 보고 : 테스트 수행결과를 목적과 비교하여 평가
해야할 일
 - 테스트 계획에 정의된 종결 기준에 따라 테스트 로그 확인
 - 추가 테스트가 필요한 지에 대한 평가를 하거나 종결 기준을 변경
 - 이해 관계자들을 위한 테스트 요약 보고 작성

테스트 마감 활동
 - 모든 테스트 활동에서 경험, 테스트 도구, 사실, 통계를 종합하기 위해 데이터를 수집하고 완료
 - 재정비하는 과정
테스트 마감 활동 시 해야할 일
 - 계획된 산출물이 산출되는 지에 대한 확인, 개별 요소에 대한 보고, 변경 요구 항목처리, 그리고 시스템을 인수하는 것에 대한 문서화
 - 테스트환경, 테스트 기반 설비를 차후에 사용할 것을 대비하여 마감하고 보관
 - 테스트웨어(테스트 도구)를 유지보수 조직에 이관
 - 테스트 프로세스 심사(평가) 및 개선 사항 확인
 -  이후 릴리즈나 테스트, 테스트 성숙도의 개선에 지침이 될 수 있도록 개선사항 및 시사점 도출

(03) 소프트웨어 테스트 종류

정적 테스트 정의(코드를 볼수있는 프로그램 실행하지 않고 진행, 블랙박스 테스트와 동일하다고 간주)
테스트 대상을 실행하지 않는 방식으로 테스트를 수행한다.
대표적인 방법으로는 리뷰(Review)와 정적 분석(Static analysis)이 있다.
SW의 정적인 형태를 검사, 검토, 분석하여 결함을 찾는 활동

동적 테스트(코드를 볼수있는 프로그램 실행하여 보면서 진행, 화이트박스 테스트와 동일하다고 간주)
정적 테스팅에 비해 정확성은 뛰어나나 완전하지는 못함

구조 기반 테스트(화이트박스 테스트)
구조 기반 테스트(Structure-based test)는 프로그램 제어 흐름이나 자료
흐름 정보를 이용하여 테스트 케이스를 설계하는 방법이다. 
구조 기반 테스트는 프로그램의 내부 구조 정보를 기반으로 테스트
케이스를 설계하는 측면에서 구조적 테스트(Structural test), 화이트박스
테스트(White box test) 또는 글래스 박스 테스트(Glass-box test)라고도
한다

명세 기반 테스트(화면기반 테스트, 블랙박스 테스트)
SW의 정적인 형태를 검사, 검토, 분석하여 결함을 찾는 활동

(04) 테스트 설계 기법
테스트 베이시스 문서(테스트 기반 문서)

동등 분할
동일한 영역에서는 같은 결과를 도출한다

경계값 분석
영역간 경계값을 적용했을 때 값을 확인

페어와이즈(조합)
 - 모든 경우의 수를 쌍으로 만들어서 케이스로 넣어놔야한다
 - 경우의 수를 많이 만들어야 좋음
등급	결제수단		가게
실버	카드		베이커리
실버	현금		베이커리
실버	계좌이체		베이커리
골드	.		.
vip	.		.
.	.		.
.	.		.
.	.		.

상태전이
 - 특정한 이벤트에 의하여 현재 상황에서 다른 상황으로 상태가 변화에 대한 결함을 찾아 내는 것에 유용
 - 조건이 변하는 것에 대한 결함
 - ex.예약판매 : 예약했다가 판매가 이루어질때 변하는 상황에 따라 나타나는 결함

유스케이스 테스팅
 - 통합 테스트 단계에서 주로 진행
 - 전체 프로그램의 시작에서 종료까지
 - 실제 시스템이 사용되는 방식에 기반하여 프로세스 흐름을 기술한다
 - 액터 행위와 시스템의 행위 순서대로 정리
 - 시나리오 흐름대로 테스트를 명세화




메모, 투두리스트, 프로젝트 커뮤니케이션을 위한 실무 용어 가이드

